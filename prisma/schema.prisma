// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  preferences UserPreferences?
  customLinks CustomLink[]
  emailAddresses EmailAddress[]
  trainingDays TrainingDay[]

  @@map("users")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Store enabled link IDs as JSON array
  enabledLinks String[] @default([])
  
  // User's city for weather display
  city String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model TrainingDay {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dayOfWeek String
  activity String @default("rest")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, dayOfWeek])
  @@map("training_day")
}

model CustomLink {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title    String
  url      String
  icon     String
  color    String   @default("from-gray-500 to-gray-600")
  gradient String   @default("bg-gradient-to-br from-gray-500 to-gray-600")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_links")
}

model EmailAddress {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  email     String
  inboxUrl  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_addresses")
}